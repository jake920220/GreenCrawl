var path = require('path');
var request = require('request');
var cheerio = require('cheerio');
var Iconv = require('iconv').Iconv;
// EUC-KR -> UTF-8
var iconv = new Iconv('EUC-KR//TRANSLIT//IGNORE', 'UTF-8//TRANSLIT//IGNORE');
var async = require('async');
var utf8 = require('utf8');
var fs = require('fs');
var json2csv = require('json2csv');
var img_down = require('image-downloader');
var url = require('url');
var sortBy = require('sort-by');
var Converter = require('csvtojson').Converter;
var img_down = require('image-downloader');
var exec = require('child_process').exec;
var myDatas = require('')

var RegGetModelNum = /[0-9]{2,3}/gi;
var RegKorCheck = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/;
var modelTonFilter = ["10", "08", "07", "06", "04", "03", "02", "030", "035", "017", "020", "010", "015"];
var modelTonName = [
    "Excavator(28~32t)",
    "Excavator(20~27t)",
    "Excavator(16~19t)",
    "Excavator(12~15.5t)",
    "Excavator(7~11t)",
    "Excavator(4.5~6t)",
    "Excavator(4.5~6t)",
    "Mini Excavator(2.6~4t)",
    "Mini Excavator(2.6~4t)",
    "Mini Excavator(1.7~2.5t)",
    "Mini Excavator(1.7~2.5t)",
    "Mini Excavator(0.1~1.6t)",
    "Mini Excavator(0.1~1.6t)"
];

console.log("키키키");

// var classify = {
//     '사이드타입' : 'Hydraulic Breaker:Side Breaker',
//     '탑타입' : 'Hydraulic Breaker:Top Breaker',
//     '박스타입' : 'Hydraulic Breaker:Box Breaker',
//     '스페셜타입' : 'Hydraulic Breaker:Special Breaker',
//     '기타타입' :'Hydraulic Breaker:Etc Breaker',
//     '쪽버켓': 'Bucket:Small Bucket',
//     '본버켓': 'Bucket:Standard Bucket',
//     '대버켓': 'Bucket:Wide Bucket',
//     '채버켓': 'Bucket:Skeleton Bucket',
//     '스페셜버켓': 'Bucket:Special Bucket',
//     '기타버켓': 'Bucket:Etc Bucket',
//     '버켓클렘프':
//     '리퍼':
//     '무유압집게':
//     '고철집게':
//     '돌집게':
//     '나무집게':
//     '오렌지집게':
//     '클렘집게':
//     '딱다구리집게':
//     '호랑이집게':
//     '코끼리집게':
//     '기타집게':
//     '반자동크러셔':
//     '멍텅구리크러셔':
//     '회전식크러셔':
//     '기타크러셔':
//     '지게발':
//     '고철가위&커터':
//     '해머':
//     '코어드릴':
//     '콤펙터':
//     '기타':
// }


(function () {
    var output = {};
    //페이지에서 아이디를 따올때
    var pageName = {
        gulsak: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g105_2&page=1&page=',
        attach: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g105_1&page=1&page=',

        dump19: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g201_111&page=1&page=',
        dump16: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g202_111&page=1&page=',
        dump10: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g203_112&page=1&page=',
        churera: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g204_1&page=1&page=',
        trailler: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g205_1&page=1&page=',

        mixertruck: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g301_1&page=1&page=',

        zigyechar10: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g400_1&page=1&page=',
        zigyechar6: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g401_1&page=1&page=',
        zigyechar5: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g402_1&page=1&page=',
        zigyecharauto: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g400_2&page=1&page='
    }
    //게시물에서 내용따올때
    var idPage = {
        gulsak: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g105_2&wr_id=',
        attach: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g105_1&wr_id=',

        dump19: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g201_111&wr_id=',
        dump16: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g202_111&wr_id=',
        dump10: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g203_112&wr_id=',
        churera: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g204_1&wr_id=',
        trailler: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g205_1&wr_id=',

        mixertruck: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g301_1&wr_id=',

        zigyechar10: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g400_1&wr_id=',
        zigyechar6: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g401_1&wr_id=',
        zigyechar5: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g402_1&wr_id=',
        zigyecharauto: 'http://wgreen.cafe24.com/bbs/gn4/bbs/board.php?bo_table=g400_2&wr_id='
    }

    var imgLink = {
        gulsak: '/cgis/ezVsp.html?sp=_LPshP_g105_2',
        attach: '/cgis/ezVsp.html?sp=_LPshP_g105_1',

        mixertruck: '/cgis/ezVsp.html?sp=_LPshP_g301_1',
        zigyechar6: '/cgis/ezVsp.html?sp=_LPshP_g401_1',
        zigyechar5: '/cgis/ezVsp.html?sp=_LPshP_g402_1',
        zigyechar10: '/cgis/ezVsp.html?sp=_LPshP_g400_1',

        dump10: '/cgis/ezVsp.html?sp=_LPshP_g203_112',
        dump16: '/cgis/ezVsp.html?sp=_LPshP_g202_111',
        dump19: '/cgis/ezVsp.html?sp=_LPshP_g201_111'
    }

    var CategoryFirst = {
        attach: 'Attachment&Parts'
    }


    var ifImgFailed = {
        dump19: '/cgis/ezVsp.html?sp=_LPshP_V14hnn_1'
    }


    output.testone = function (id, category) {
        var options = {
            url: idPage[category] + id,
            encoding: null
        };

        request(options, function (err, res, html) {
            if (err) {
                console.log("ERR!", err);
            }

            var decoded = iconv.convert(html);
            var $ = cheerio.load(decoded);

            var content = $('span.ct.lh font').text();

            var text = "";
            $('span.ct.lh font').each(function () {
                for (var index in this.children) {
                    if (typeof this.children[index].data !== 'undefined') {
                        console.log(this.children[index].data.trim().replace(/\r\n/g, ''));
                        text += this.children[index].data.trim().replace(/\r\n/g, '') + "";
                    }
                }
            });
            console.log(text.replace(/\,/g, ''));
        });
    }


    /**
     * 슈퍼핵심
     * @param maxPages
     * @param category
     */
    output.getCSVSeperated = function (startPages, maxPages, category) {

        var count = startPages;
        var resultObj = {}, resultArr = [];

        async.whilst(
            function () {
                return count < maxPages;
            }, function (callback) {
                count++; //페이지늘려줌

                async.waterfall([
                    function (next) {
                        //여기서 count번째의 페이지에 있는 게시물들 ID값을 읽어

                        var options = {
                            url: pageName[category] + count,
                            encoding: null
                        };

                        request(options, function (err, res, html) {
                            if (err) {
                                console.log("ERR!", err);
                            }

                            var decoded = iconv.convert(html);
                            var $ = cheerio.load(decoded);

                            var bigForm = $('form').attr('name', 'fboardList').find('table').eq(1).children('tr');

                            bigForm.splice(0, 1);
                            var arr = [];

                            bigForm.each(function () {
                                //아이디를 추려내는 작업.
                                var splits = $(this).find('td').eq(3).toString().split('</td><td>');

                                for (var i = 0, len = splits.length; i < len; i++) {
                                    var start = splits[i].indexOf('href="');
                                    var end = splits[i].indexOf('&amp;page', start + 1);

                                    var str = splits[i].substring(start + 1, end);
                                    arr.push(str.split('id=')[1]);
                                }
                            });
                            var uniq = arr.filter(function (itm, i, arr) {
                                return i == arr.indexOf(itm);
                            });
                            next(null, uniq);
                        });
                    },
                    function (arr, next) {
                        console.log(count, "번 페이지 게시물들 작업중..");
                        var objArr = [], num = 0;
                        async.whilst(
                            function () {
                                return num < arr.length;
                            },
                            function (cb) {

                                var options = {
                                    url: idPage[category] + arr[num],
                                    encoding: null
                                };

                                request(options, function (err, res, html) {
                                    if (err) {
                                        console.log("ERR!", err);
                                    }

                                    var decoded = iconv.convert(html);
                                    var $ = cheerio.load(decoded);

                                    //핵심 테이블에 접근하는 코드
                                    var forms = $('table#v4Lyr2').find('table').find('tr').find('td');
                                    var formlength = $('table#v4Lyr2').find('table').find('tr').length;
                                    var ImgForms = $('span#v4Lyr3').toString();
                                    var content = $('span.ct.lh font').text();


                                    if (typeof forms[0] == 'undefined') {
                                        //삭제된 글 처리
                                        console.log("theres no " + arr[num] + " now..");
                                        num++;
                                        cb();
                                    } else if (ImgForms.indexOf('&SRC=') == -1) {
                                        //이미지가 없는 게시물은 안읽어버린다.
                                        console.log("no image on" + idPage[category] + arr[num]);
                                        num++;
                                        cb();
                                    }
                                    else {

                                        var obj = {
                                            authorized: 1,
                                            isHeavycarVisible: 1,
                                            customerIds: 1,
                                            priceUnit: 'krw',
                                            customerPriceUnit: 'krw',
                                            manufacturing: 'manufacturingOem',
                                            productState: 'productStateAPlus',
                                            partCategoryFirst: CategoryFirst[category],
                                            brand: 'brandCommon',
                                            model: 'modelCommon',
                                        };

                                        var itemsArr = [];

                                        if (formlength > 6) {
                                            forms.splice(22, 1);
                                        }
                                        forms.each(function () {
                                            itemsArr.push($(this).text().trim());
                                        });

                                        for (var i = 0, len = itemsArr.length; i < len; i++) {
                                            if (itemsArr[i].indexOf("Xwin") != -1) {
                                                itemsArr[i] = "QR코드";
                                            }
                                            if (i % 2 == 1) {
                                                obj[itemsArr[i - 1]] = itemsArr[i];
                                            }
                                        }

                                        if (obj['구분'] == '판매완료' || obj['구분'] == '삽니다') {
                                            //판매완료거나 삽니다인 글은 걸러버림.
                                            num++;
                                            cb();
                                        }

                                        var text = "";
                                        $('span.ct.lh font').each(function () {
                                            for (var index in this.children) {
                                                if (typeof this.children[index].data !== 'undefined') {
                                                    text += this.children[index].data.trim().replace(/\r\n/g, '') + " ";
                                                }
                                            }
                                        });

                                        if (text.indexOf(',') != -1) {
                                            obj.crmDescription = text.replace(/\,/g, '');
                                        } else {
                                            obj.crmDescription = text;
                                        }

                                        obj.folder = arr[num];
                                        obj.memo2 = idPage[category] + arr[num];


                                        // objRefactoring(obj);
                                        resultArr.push(obj);
                                        num++;
                                        cb();

                                    }
                                });
                            }, function (err, result) {
                                if (err) {
                                    console.log("에러", err);
                                    next(err);
                                }
                                console.log(count + "번 까지의 작업량 ", resultArr.length);
                                next(null, "SUCCESS");
                            }
                        )
                    }
                ], function (err, res) {
                    //waterfall 마치고 오는곳. 이곳에 한 페이지 내의 오브젝트값이 res로 온다. callback()으로 반복한다.
                    if (err) {
                        console.log("err", err);
                        return;
                    }
                    console.log(res);
                    callback();
                })
            }, function (err, res) {
                //whilst 가 끝나고오는 펑션. 최종적인 resultArr이 담긴다.

                if (err) {
                    console.log('whilst err', err);
                    return;
                }
                console.log("what's res", resultArr.length);
                resultArr.sort(sortBy('가격', '상호', '모델명'));

                var deletedCount = 0;
                for (var i = 0; i < resultArr.length - 1; i++) {
                    if (resultArr[i].상호 == resultArr[i + 1].상호 && resultArr[i].모델명 == resultArr[i + 1].모델명 && resultArr[i].가격 == resultArr[i + 1].가격) {
                        console.log('지워진 항목', ++deletedCount);
                        delete resultArr[i];
                    }
                }
                resultArr = resultArr.filter(function (el) {
                    return (typeof el !== "undefined");
                });
                console.log("======================================================================");
                resultArr.sort(sortBy('folder'));
                console.log(resultArr.length);

                var objlength = 0, objIndex = 0;
                for (var i = 0, len = resultArr.length; i < len; i++) {
                    objRefactoring(resultArr[i]);
                    if (Object.keys(resultArr[i]).length > objlength) {
                        objlength = Object.keys(resultArr[i]).length;
                        objIndex = i;
                        console.log("field값 조정..", objIndex, "번째 인덱스");
                    }
                }


                // var fields = Object.keys(resultArr[objIndex]);


                var fields = [
                    'partCategoryFirst',
                    'partCategorySecond',
                    'partCategoryThird',
                    'modelTon',
                    'isHeavycarVisible',
                    'productState',
                    'brand',
                    'model',
                    'name',
                    'displayName',
                    'authorized',
                    'priceCustomer',
                    'priceFinal',
                    'priceUnit',
                    'crmDescription',
                    'madeYear',
                    'madeMonth',
                    'manufacturing',
                    'location',
                    'customerIds',
                    'priceSupplys',
                    'pricePurchases',
                    'priceDeals',
                    'customerPriceUnit',
                    'memo1',
                    'memo2',
                    'folder'
                ]

                var csv = json2csv({
                    data: resultArr,
                    fields: fields
                });

                var date = new Date();
                var theName = category + '_' + (date.getMonth() + 1) + '_' + (date.getDate() - 1);
                fs.writeFile(theName + '.csv', csv, function (err) {
                    if (err) {
                        console.log(err);
                        next(err);
                        return;
                    }
                    console.log("SUCCESS 3");
                });
            }
        )
    }


    output.failedImgDown = function (category) {
        var failed = [
            229240,
            229242
        ];

        async.waterfall([

            function (next) {

                var ilen = failed.length;
                console.log(ilen);
                var count = 0, repeat = 1;
                objArr = [];

                async.whilst(
                    function () {
                        return count < failed.length;
                    },
                    function (callback) {

                        console.log(count + '/' + ilen + " 진행중..");

                        var options = {
                            url: idPage[category] + failed[count],
                            encoding: null
                        };

                        try {
                            request(options, function (err, res, html) {
                                if (err) {
                                    console.log("ERR!", err);
                                }

                                var decoded = iconv.convert(html);
                                var $ = cheerio.load(decoded);

                                var obj = {
                                    host: 'http://wgreen.cafe24.com'
                                    // host : 'http://vip21s.net'
                                };
                                obj.path = imgLink[category];
                                // obj.path = ifImgFailed[category];
                                var forms = $('span#v4Lyr3');

                                if (typeof forms[0] == 'undefined') {
                                    console.log("theres no " + failed[count] + " now..");
                                    count++;
                                    callback();
                                } else {
                                    forms.each(function () {
                                        var str = ($(this).toString());

                                        if (str.indexOf('&SRC') != -1) {
                                            try {
                                                obj._id = failed[count];
                                                var arr = str.split(/\n/);
                                                var temp = [];
                                                for (var i = 0; i < arr.length; i++) {
                                                    if (arr[i].indexOf('.jpg') != -1 || arr[i].indexOf('.JPG') != -1 || arr[i].indexOf('.jpeg') != -1 || arr[i].indexOf('.png') != -1 || arr[i].indexOf('.PNG') != -1
                                                        || arr[i].indexOf('.gif') != -1 || arr[i].indexOf('.GIF') != -1 || arr[i].indexOf('.bmp') != -1 || arr[i].indexOf('.BMP') != -1) {
                                                        temp.push(arr[i]);
                                                    }
                                                }

                                                for (var i = 0; i < temp.length; i++) {
                                                    var start = temp[i].indexOf('&SRC=');
                                                    var end = temp[i].indexOf('"><\\');
                                                    temp[i] = temp[i].substring(start + 1, end).split('/').pop();
                                                }

                                                obj.imgs = temp;
                                                objArr.push(obj);
                                                count++;
                                                callback();
                                            } catch (e) {
                                                console.log("FUCK", e);
                                            }
                                        }
                                        else {
                                            count++;
                                            callback();
                                        }
                                    });
                                }

                            });
                        } catch (e) {
                            console.log(e);
                        }

                    },
                    function (err) {
                        if (err) {
                            console.log("워후", err);
                        }
                        next(null, objArr);
                    }
                )
            },
            function (objArr, next) {

                var date = new Date();
                var theName = category + '_' + (date.getMonth() + 1) + '_' + (date.getDate() - 1);

                var objlen = objArr.length;
                if (!fs.existsSync(theName)) {
                    fs.mkdirSync(theName);
                }

                for (var i = 0; i < objlen; i++) {
                    if (fs.existsSync(theName + '/' + objArr[i]._id)) {
                        continue;
                    }
                    fs.mkdirSync(theName + '/' + objArr[i]._id);
                }

                console.log("making dir success");
                next(null, objArr, theName);
            },
            function (objArr, theName, next) {
                var theError;
                async.each(objArr, function (obj, cb) {
                    async.each(obj.imgs, function (img, callback) {
                        var options = {
                            url: url.format(obj.host + obj.path + '/' + img),
                            dest: theName + '/' + obj._id,
                            done: function (err, filename, image) {
                                if (err) {
                                    console.log("==========================");
                                    console.log(obj._id);
                                    console.log("==========================");
                                    theError = theError + obj._id + ',';
                                }
                                console.log('File saved to', filename);
                            },
                        };
                        img_down(options);
                    });
                }, function () {
                    console.log("FINISH");
                    next(null, theError);
                });
            }
        ], function (err, res) {
            if (err) {
                console.log("ERERR", err);
            }
            console.log("에러난것들", res);
        })
    }

    //만들어진 csv를 이용해서 id값만 빼온 후 이미지를 저장하면 중복된 게시물이나 판매완료는 다 지울수있다.
    output.getImgs = function (fileName, category) {

        async.waterfall([
            function (next) {

                var csvConverter = new Converter({});
                var idsArr = [];
                csvConverter.on("end_parsed", function (jsonObj) {
                    //console.log(jsonObj); //here is your result json object
                    for (var i = 0, len = jsonObj.length; i < len; i++) {
                        // idsArr.push(jsonObj[i]._id);
                        idsArr.push(jsonObj[i].folder);
                    }
                    next(null, idsArr);
                });
                fs.createReadStream(fileName).pipe(csvConverter);

            },
            function (idsArr, next) {

                var ilen = idsArr.length;
                console.log(ilen);
                var count = 0, objArr = [], imgsLengthCounter = 0;
                ;

                async.whilst(
                    function () {
                        return count < idsArr.length;
                    },
                    function (callback) {

                        console.log(count + '/' + ilen + " 진행중..");

                        var options = {
                            url: idPage[category] + idsArr[count],
                            encoding: null
                        };

                        try {
                            request(options, function (err, res, html) {
                                if (err) {
                                    console.log("ERR!", err);
                                }

                                var decoded = iconv.convert(html);
                                var $ = cheerio.load(decoded);

                                var obj = {
                                    host: 'http://wgreen.cafe24.com'
                                };
                                obj.path = imgLink[category];

                                var forms = $('span#v4Lyr3');

                                if (typeof forms[0] == 'undefined') {
                                    console.log("theres no " + idsArr[count] + " now..");
                                    count++;
                                    callback();
                                } else {
                                    forms.each(function () {
                                        var str = ($(this).toString());

                                        if (str.indexOf('&SRC') != -1) {
                                            try {
                                                obj._id = idsArr[count];
                                                var arr = str.split(/\n/);
                                                var temp = [];
                                                for (var i = 0; i < arr.length; i++) {
                                                    if (arr[i].indexOf('.jpg') != -1 || arr[i].indexOf('.JPG') != -1 || arr[i].indexOf('.jpeg') != -1 || arr[i].indexOf('.png') != -1 || arr[i].indexOf('.PNG') != -1
                                                        || arr[i].indexOf('.gif') != -1 || arr[i].indexOf('.GIF') != -1 || arr[i].indexOf('.bmp') != -1 || arr[i].indexOf('.BMP') != -1) {
                                                        temp.push(arr[i]);
                                                    }
                                                }

                                                for (var i = 0; i < temp.length; i++) {
                                                    var start = temp[i].indexOf('&SRC=');
                                                    var end = temp[i].indexOf('"><\\');
                                                    temp[i] = temp[i].substring(start + 1, end).split('/').pop();
                                                }

                                                obj.imgs = temp;
                                                imgsLengthCounter += obj.imgs.length;
                                                objArr.push(obj);
                                                count++;
                                                callback();
                                            } catch (e) {
                                                console.log("FUCK", e);
                                            }
                                        }
                                        else {
                                            count++;
                                            callback();
                                        }
                                    });
                                }


                            });
                        } catch (e) {
                            console.log(e);
                        }

                    },
                    function (err) {
                        if (err) {
                            console.log("워후", err);
                        }
                        console.log(imgsLengthCounter, "개의 이미지..");
                        next(null, objArr);
                    }
                )
            },
            function (objArr, next) {
                var date = new Date();
                var theName = category + '_' + (date.getMonth() + 1) + '_' + (date.getDate() - 1);

                var objlen = objArr.length;
                if (!fs.existsSync(theName)) {
                    fs.mkdirSync(theName);
                }

                for (var i = 0; i < objlen; i++) {
                    if (fs.existsSync(theName + '/' + objArr[i]._id)) {
                        continue;
                    }
                    fs.mkdirSync(theName + '/' + objArr[i]._id);
                }

                console.log("making dir success");
                next(null, objArr, theName);
            },
            function (objArr, theName, next) {
                var theError;
                async.each(objArr, function (obj, cb) {
                    async.each(obj.imgs, function (img, callback) {
                        var options = {
                            url: url.format(obj.host + obj.path + '/' + img),
                            dest: theName + '/' + obj._id,
                            done: function (err, filename, image) {
                                if (err) {
                                    console.log("==========================");
                                    console.log(obj._id);
                                    console.log("==========================");
                                    theError = theError + obj._id + ',';
                                }
                                console.log('File saved to', filename);
                            },
                        };
                        img_down(options);
                    });
                }, function () {
                    console.log("FINISH");
                    next(null, theError);
                });
            }
        ], function (err, res) {
            if (err) {
                console.log("ERERR", err);
            }
            console.log("에러난것들", res);
        })
    }


    //어태치 페이지처럼 한꺼번에 진행이안되어서 여러개의 csv파일로 나뉘어있을때 다시 하나로합치면서 중복값을 한번 더 제거해주는펑션
    output.csvToJson = function () {

        var count = 0, arr = [];

        var csvConverter = new Converter({});

        csvConverter.on("end_parsed", function (jsonObj) {
            //console.log(jsonObj); //here is your result json object
            for (var i = 0, len = jsonObj.length; i < len; i++) {
                arr.push(jsonObj[i]);
            }

            console.log('-');
            console.log(arr.length);

            arr.sort(sortBy('가격', '상호', '모델명'));
            console.log(arr);
            for (var i = 0; i < arr.length - 1; i++) {
                if (arr[i].상호 == arr[i + 1].상호 && arr[i].모델명 == arr[i + 1].모델명 && arr[i].가격 == arr[i + 1].가격) {
                    delete arr[i];
                }
            }
            arr = arr.filter(function (el) {
                return (typeof el !== "undefined");
            });
            console.log("======================================================================");
            arr.sort(sortBy('_id'));
            console.log(arr.length);


            var fields = Object.keys(arr[0]);

            var csv = json2csv({
                data: arr,
                fields: fields
            });

            fs.writeFile('attachAll.csv', csv, function (err) {
                if (err) {
                    console.log(err);
                    next(err);
                    return;
                }
                console.log("done");
            });
        });

        for (var i = 0; i < 4; i++) {
            fs.createReadStream('attach_' + (i + 1) + '.csv').pipe(csvConverter);
        }
    }


    if (typeof module !== 'undefined' && module.exports) {
        module.exports = output;
    }
})();


function objRefactoring(obj) {
    obj['madeYear'] = obj['제작년월'].split('.')[0];
    obj['madeMonth'] = obj['제작년월'].split('.')[1];
    obj['location'] = obj['위치'];

    //모델톤

    var num = obj['모델명'].replace(/[^0-9]/gi, '');
    console.log(obj['모델명'], num);
    if (modelTonFilter.indexOf(num) != -1) {
        obj['modelTon'] = modelTonName[modelTonFilter.indexOf(num)];
    } else {
        obj['modelTon'] = '';
    }


    if (obj['가격'].indexOf('만원') != -1) {
        obj['가격'] = obj['가격'].replace(/\만원/g, '').trim() + '0000';
    }
    if (obj['가격'].indexOf(',') != -1) {
        obj['가격'] = obj['가격'].replace(/\,/g, '');
    }


    if (obj['연락처'].indexOf('-') != -1) {
        if (obj['연락처'].indexOf('--') != -1) {
            obj['연락처'] = obj['연락처'].replace(/\--/g, '-');
        }
    } else if (obj['연락처'].indexOf('.') != -1) {
        obj['연락처'] = obj['연락처'].replace(/\./g, '-');
    } else if (obj['연락처'].indexOf('_') != -1) {
        obj['연락처'] = obj['연락처'].replace(/\_/g, '-');
    } else if (obj['연락처'].indexOf('/') != -1) {
        obj['연락처'] = obj['연락처'].replace(/\//g, '-');
    } else if (obj['연락처'].indexOf(' ') != -1) {
        obj['연락처'] = obj['연락처'].replace(/ /g, '-');
    } else {
        if (obj['연락처'].length == 11) {
            var front = obj['연락처'].substring(0, 3);
            var last = obj['연락처'].substring(7);
            var middle = obj['연락처'].substring(3, 7);
            obj['연락처'] = front + '-' + middle + '-' + last;

        } else if (obj['연락처'].length == 10) {
            var front = obj['연락처'].substring(0, 3);
            var last = obj['연락처'].substring(6);
            var middle = obj['연락처'].substring(3, 6);
            obj['연락처'] = front + '-' + middle + '-' + last;
        }
    }
    obj['memo1'] = obj['연락처'];
    obj['displayName'] = obj['모델명'];
    obj['priceFinal'] = obj['가격'];
    obj['priceSupplys'] = obj['가격'];
    obj['pricePurchases'] = obj['가격'];
    obj['priceDeals'] = obj['가격'];
    obj['priceCustomer'] = parseInt(obj['priceFinal'] / 0.85);

    delete obj['가격'];
    delete obj['모델명'];
    delete obj['연락처'];
    delete obj['제작년월'];
    delete obj['상태'];
    delete obj['위치'];
    delete obj['제작사'];
    delete obj['구분'];
    delete obj['작성구분'];
    delete obj['부가정보'];
    delete obj['상호'];
}

